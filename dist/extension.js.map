{"version":3,"sources":["webpack://appa/./src/commandManager.ts","webpack://appa/./src/commands/formatCommands.ts","webpack://appa/./src/commands/index.ts","webpack://appa/./src/context.ts","webpack://appa/./src/logger.ts","webpack://appa/external \"path\"","webpack://appa/external \"vscode\"","webpack://appa/webpack/bootstrap","webpack://appa/./src/extension.ts"],"names":["commands","Map","registration","this","values","dispose","clear","command","registerCommand","id","execute","impl","thisArg","has","set","vscode","includeFileExtensions","includeFileNames","excludeFileNames","excludeFolders","toSentenceCase","str","charAt","toUpperCase","substr","toLowerCase","executeFormatAll","verb","verbPresent","verbPast","save","close","config","workspace","getConfiguration","get","window","withProgress","title","location","ProgressLocation","Notification","folders","workspaceFolders","sum","folder","formatAllInUri","uri","message","getLogger","log","showInformationMessage","stat","fs","basename","path","fsPath","extname","name","type","FileType","Directory","includes","dirEntries","readDirectory","dirEntry","entryName","fullEntryPath","Uri","joinPath","File","showTextDocument","forEach","executeCommand","activeTextEditor","document","e","processFile","ctx","context","Logger","channel","createOutputChannel","appendLine","toString","logger","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call","console","setContext","subscriptions","push","commandManager","CommandManager","register","FormatAllCommand","FormatAndSaveAllCommand","SortImportsAllCommand","SortImportsAndSaveAllCommand","SortImportsAndFormatAllCommand","SortImportsAndFormatAndSaveAllCommand","registerCommands"],"mappings":"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","file":"extension.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License.\r\n *  See https://github.com/microsoft/vscode/blob/master/LICENSE.txt for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport * as vscode from 'vscode';\r\n\r\nexport interface Command {\r\n    readonly id: string;\r\n\r\n    execute(...args: any[]): void;\r\n}\r\n\r\nexport class CommandManager {\r\n    private readonly commands = new Map<string, vscode.Disposable>();\r\n\r\n    public dispose(): void {\r\n        for (const registration of this.commands.values()) {\r\n            registration.dispose();\r\n        }\r\n        this.commands.clear();\r\n    }\r\n\r\n    public register(...commands: Command[]): void {\r\n        for (const command of commands) {\r\n            this.registerCommand(command.id, command.execute, command);\r\n        }\r\n    }\r\n\r\n    private registerCommand(id: string, impl: (...args: any[]) => void, thisArg?: any) {\r\n        if (this.commands.has(id)) {\r\n            return;\r\n        }\r\n\r\n        this.commands.set(id, vscode.commands.registerCommand(id, impl, thisArg));\r\n    }\r\n}\r\n","import * as vscode from 'vscode';\r\n\r\nimport { Command } from '../commandManager';\r\nimport { getLogger } from '../logger';\r\n\r\nimport * as path from 'path';\r\n//import { basename } from 'node:path';\r\n\r\nlet includeFileExtensions: string[] = [];\r\nlet includeFileNames: string[] = [];\r\nlet excludeFileNames: string[] = [];\r\nlet excludeFolders: string[] = [];\r\n\r\nexport class FormatAllCommand implements Command {\r\n    public readonly id = 'appa.format.formatAll';\r\n\r\n    public async execute(): Promise<void> {\r\n        await executeFormatAll(['editor.action.formatDocument'], 'format', 'formatting','formatted', false, false)\r\n    }\r\n}\r\n\r\nexport class FormatAndSaveAllCommand implements Command {\r\n    public readonly id = 'appa.format.formatAndSaveAll';\r\n\r\n    public async execute(): Promise<void> {\r\n        await executeFormatAll(['editor.action.formatDocument'], 'format and save', 'formatting and saving','formatted and saved', true, true)\r\n    }\r\n}\r\n\r\nexport class SortImportsAllCommand implements Command {\r\n    public readonly id = 'appa.format.sortImportsAll';\r\n    \r\n    public async execute(): Promise<void> {\r\n        await executeFormatAll(['python.sortImports'], 'sort imports', 'sorting imports of','sorted imports of', false, false)\r\n    }\r\n}\r\n\r\nexport class SortImportsAndSaveAllCommand implements Command {\r\n    public readonly id = 'appa.format.sortImportsAndSaveAll';\r\n    \r\n    public async execute(): Promise<void> {\r\n        await executeFormatAll(['python.sortImports'], 'sort imports and save ', 'sorting imports and saving','sorted imports and saved', true, true)\r\n    }\r\n}\r\n\r\n\r\nexport class SortImportsAndFormatAllCommand implements Command {\r\n    public readonly id = 'appa.format.sortImportsAndFormatAll';\r\n    \r\n    public async execute(): Promise<void> {\r\n        await executeFormatAll(['python.sortImports','editor.action.formatDocument'], 'sort imports and format', 'sorting imports and formatting','sorted imports and formatted', false, false)\r\n    }\r\n}\r\n\r\nexport class SortImportsAndFormatAndSaveAllCommand implements Command {\r\n    public readonly id = 'appa.format.sortImportsAndFormatAndSaveAll';\r\n    \r\n    public async execute(): Promise<void> {\r\n        await executeFormatAll(['python.sortImports','editor.action.formatDocument'], 'sort imports, format and save', 'sorting imports, formatting, and saving','sorted imports, formatted, and saved', true, true)\r\n    }\r\n}\r\n\r\n\r\nfunction toSentenceCase(str: string) {\r\n    return str.charAt(0).toUpperCase() + str.substr(1).toLowerCase();\r\n}\r\n// function toTitleCase(str: string) {\r\n//     return str.replace(\r\n//         /\\w\\S*/g,\r\n//         function (txt: string) {\r\n//             return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n//         }\r\n//     );\r\n// }\r\n\r\nasync function executeFormatAll(\r\n    commands: string[],\r\n    verb: string,\r\n    verbPresent: string,\r\n    verbPast: string,\r\n    save: boolean,\r\n    close: boolean): Promise<void> {\r\n\r\n    const config = vscode.workspace.getConfiguration('appa.format');\r\n    includeFileExtensions = config.get('includeFileExtensions', []);\r\n    includeFileNames = config.get('includeFileNames', []);\r\n    excludeFileNames = config.get('excludeFileNames', []);\r\n    excludeFolders = config.get('excludeFolders', []);\r\n\r\n    vscode.window.withProgress(\r\n        {\r\n            title: toSentenceCase(verbPresent) + \" all eligible files in workspace...\",\r\n            location: vscode.ProgressLocation.Notification,\r\n        },\r\n        async () => {\r\n\r\n            const folders = vscode.workspace.workspaceFolders;\r\n            if (!folders) {\r\n                return;\r\n            }\r\n\r\n            let sum = 0;\r\n            for (const folder of folders) {\r\n                sum += await formatAllInUri(folder.uri, commands, verb, verbPresent, verbPast, save, close);\r\n            }\r\n\r\n            const message = toSentenceCase(verbPast) + \" \" + sum + \" files.\";\r\n            getLogger().log(message);\r\n            vscode.window.showInformationMessage(message);\r\n        },\r\n    );\r\n}\r\n\r\n\r\nasync function formatAllInUri(\r\n    uri: vscode.Uri,\r\n    commands: string[],\r\n    verb: string,\r\n    verbPresent: string,\r\n    verbPast: string,\r\n    save: boolean,\r\n    close: boolean\r\n): Promise<number> {\r\n    const stat: vscode.FileStat = await vscode.workspace.fs.stat(uri);\r\n    const basename = path.basename(uri.fsPath);\r\n    const extname = path.extname(uri.fsPath);\r\n    const name = basename + extname;\r\n    let sum = 0;\r\n\r\n    if ((stat.type & vscode.FileType.Directory) === vscode.FileType.Directory) {\r\n        if (excludeFolders.includes(basename)) { return 0; }\r\n\r\n        const dirEntries = await vscode.workspace.fs.readDirectory(uri);\r\n\r\n        for (const dirEntry of dirEntries) {\r\n            const entryName = dirEntry[0];\r\n            const fullEntryPath = vscode.Uri.joinPath(uri, entryName);\r\n            sum += await formatAllInUri(fullEntryPath, commands, verb, verbPresent, verbPast, save, close);\r\n        }\r\n    }\r\n    else if ((stat.type & vscode.FileType.File) === vscode.FileType.File) {\r\n        if (extname === \"\") { return 0; }\r\n        if (!includeFileNames.includes(name)) {\r\n            if (!includeFileExtensions.includes(extname)) { return 0; }\r\n            if (excludeFileNames.includes(name)) { return 0; }\r\n        }\r\n\r\n        let result = await processFile(uri, commands, verb, save, close)\r\n\r\n        if (result) {\r\n            sum += 1;\r\n        }\r\n    }\r\n\r\n    return sum;\r\n}\r\n\r\nasync function processFile(\r\n    uri: vscode.Uri,\r\n    commands: string[],\r\n    verb: string,\r\n    save: boolean,\r\n    close: boolean\r\n): Promise<boolean> {\r\n    try {\r\n        await vscode.window.showTextDocument(uri);\r\n\r\n        commands.forEach(async command => {\r\n            await vscode.commands.executeCommand(command);    \r\n        });\r\n        \r\n        if (save) {\r\n            await vscode.window.activeTextEditor?.document.save()\r\n        }\r\n        if (save && close) {\r\n            await vscode.commands.executeCommand(\"workbench.action.closeActiveEditor\")\r\n        }\r\n        return true;\r\n    } catch (e) {\r\n        getLogger().log(\"Unable to \" + verb.toLowerCase() + \" [\" + uri.fsPath + \"]: \" + e);\r\n    }\r\n\r\n    return false;\r\n}","export * from './formatCommands';","import { ExtensionContext } from 'vscode';\r\n\r\nexport function setContext(ctx: ExtensionContext): void {\r\n    context = ctx;\r\n}\r\n\r\nexport let context: ExtensionContext;\r\n","import * as vscode from 'vscode';\r\n\r\nexport class Logger {\r\n    public readonly channel: vscode.OutputChannel;\r\n\r\n    constructor(name: string) {\r\n        this.channel = vscode.window.createOutputChannel(name);\r\n    }\r\n\r\n    public log(message: unknown): void {\r\n        this.channel.appendLine((message as any).toString());\r\n    }\r\n}\r\n\r\nlet logger: Logger | undefined;\r\n\r\n/**\r\n * Gets a singleton instance of a logger that writes to an OutputChannel.\r\n */\r\nexport function getLogger(): Logger {\r\n    if (!logger) {\r\n        logger = new Logger('Extension Manager');\r\n    }\r\n\r\n    return logger;\r\n}\r\n","module.exports = require(\"path\");;","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\n\nimport { CommandManager } from './commandManager';\nimport * as commands from './commands/index';\nimport { setContext } from './context';\n\n\nexport function activate(context: vscode.ExtensionContext): void {\n\tconst message = 'Extension \"appa\" is now active';\n\tconsole.log(message);\n\tvscode.window.showInformationMessage(message);\n\n    setContext(context);\n\n    context.subscriptions.push(registerCommands());\n}\n\nexport function deactivate() { }\n\nfunction registerCommands(): vscode.Disposable {\n    const commandManager = new CommandManager();\n\n    commandManager.register(\n        // Format commands\n        new commands.FormatAllCommand(),\n        new commands.FormatAndSaveAllCommand(),\n        new commands.SortImportsAllCommand(),\n        new commands.SortImportsAndSaveAllCommand(),\n        new commands.SortImportsAndFormatAllCommand(),\n        new commands.SortImportsAndFormatAndSaveAllCommand(),\n    );\n\n    return commandManager;\n}\n\n"],"sourceRoot":""}